Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table =10000        
ii. Business table = 10000     
iii. Category table =10000     
iv. Checkin table =10000     
v. elite_years table =10000     
vi. friend table =10000      
vii. hours table =10000      
viii. photo table = 10000      
ix. review table =10000       
x. tip table =10000      
xi. user table =10000    

2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business = 		100000	(id)         
ii. Hours =  		1562	(business_id)         
iii. Category =  	2643	(business_id)               
iv. Attribute = 	1115	(business_id)       
v. Review=			10000	(id)  			8090 (business_id)	9581 (user_id)    
vi. Checkin = 		493		(business_id)         
vii. Photo = 		10000	(id)			6493 (busness_id)        
viii. Tip = 		3979	(business_id)	537 (user_id)    			  
ix. User = 			10000    (id)     
x. Friend = 		11		(user_id)          
xi. Elite_years = 	2780	(user_id)           

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	

3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	**Answer:** No.
	
**COMMENT:  I could not find an easy way ti iterate over the entire table without callout out each column individually.  I would seem that there is an easier way, but I counldn't find it.** 


	**SQL code used to arrive at answer:**
	SELECT id, name, review_count, yelping_since, useful, funny, cool, fans, average_stars, compliment_hot, compliment_more, compliment_profile, compliment_cute, compliment_list, compliment_note, compliment_plain, compliment_cool, compliment_funny, compliment_writer, compliment_photos
		FROM  user
		WHERE 	id is null
				OR name is null
				OR review_count is null
				OR yelping_since is null
				OR useful is null
				OR funny is null
				OR cool is null
				OR fans is null
				OR average_stars is null
				OR compliment_hot is null
				OR compliment_more is null
				OR compliment_profile is null
				OR compliment_cute is null
				OR compliment_list is null
				OR compliment_note is null
				OR compliment_plain is null
			  	OR compliment_cool is null
				OR compliment_funny is null
				OR compliment_writer is null
				OR compliment_photos is null
	

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min:1		max:5 		avg:3.708
		
	
	ii. Table: Business, Column: Stars
	
		min:1		max:5 		avg:3.654 
		
	
	iii. Table: Tip, Column: Likes
	
		min:0		max:2 		avg:0.0144 
		
	
	iv. Table: Checkin, Column: Count
	
		min:1		max:35		avg:1.9414 
		
	
	v. Table: User, Column: Review_count
	
		min:0		max:2000		avg:24.299 
		


5. List the cities with the most reviews in descending order:

**SQL code used to arrive at answer:**

	SELECT city,
	  SUM(review_count)
	FROM business
	GROUP BY city
	ORDER BY SUM (review_count) DESC;
	

**Copy and Paste the Result Below:**
+-----------------+-------------------+
| city            | SUM(review_count) |
+-----------------+-------------------+
| Las Vegas       |             82854 |
| Phoenix         |             34503 |
| Toronto         |             24113 |
| Scottsdale      |             20614 |
| Charlotte       |             12523 |
| Henderson       |             10871 |
| Tempe           |             10504 |
| Pittsburgh      |              9798 |
| Montréal        |              9448 |
| Chandler        |              8112 |
| Mesa            |              6875 |
| Gilbert         |              6380 |
| Cleveland       |              5593 |
| Madison         |              5265 |
| Glendale        |              4406 |
| Mississauga     |              3814 |
| Edinburgh       |              2792 |
| Peoria          |              2624 |
| North Las Vegas |              2438 |
| Markham         |              2352 |
| Champaign       |              2029 |
| Stuttgart       |              1849 |
| Surprise        |              1520 |
| Lakewood        |              1465 |
| Goodyear        |              1155 |
+-----------------+-------------------+
(Output limit exceeded, 25 of 362 total rows shown)	
	
6. Find the distribution of star ratings to the business in the following cities:

**i. Avon**

**SQL code used to arrive at answer:**
	
	SELECT stars AS Stars_Rating,      
	   COUNT (stars) AS Count      
	FROM business     
	WHERE city = 'Avon'     
	GROUP BY stars      

**Copy and Paste the Resulting Table Below (2 columns – star rating and count):**
+--------------+-------+
| Stars_Rating | Count |
+--------------+-------+
|          1.5 |     1 |
|          2.5 |     2 |
|          3.5 |     3 |
|          4.0 |     2 |
|          4.5 |     1 |
|          5.0 |     1 |
+--------------+-------+

**ii. Beachwood**

**SQL code used to arrive at answer:**
	
	SELECT stars AS Stars_Rating,
	        COUNT (stars) AS Count
	FROM business
	WHERE city = 'Beachwood'
	GROUP BY stars

**Copy and Paste the Resulting Table Below (2 columns – star rating and count):**
+--------------+-------+
| Stars_Rating | Count |
+--------------+-------+
|          2.0 |     1 |
|          2.5 |     1 |
|          3.0 |     2 |
|          3.5 |     2 |
|          4.0 |     1 |
|          4.5 |     2 |
|          5.0 |     5 |
+--------------+-------+	


7. Find the top 3 users based on their total number of reviews:
		
		**SQL code used to arrive at answer:**
		
		SELECT name, review_count
		FROM user
		GROUP BY name
		ORDER BY review_count DESC
		LIMIT 3;
		
**Copy and Paste the Result Below:**
+--------+--------------+
| name   | review_count |
+--------+--------------+
| Gerald |         2000 |
| .Hon   |         1246 |
| eric   |         1116 |
+--------+--------------+		


8. Does posting more reviews correlate with more fans?

Please explain your findings and interpretation of the results:

**Look at the Top Reviewers next to their fan count**
**SQL Code:**

	SELECT name, review_count, fans
	FROM user
	ORDER BY review_count DESC
	LIMIT 10;
+-----------+--------------+------+
| name      | review_count | fans |
+-----------+--------------+------+
| Gerald    |         2000 |  253 |
| Sara      |         1629 |   50 |
| Yuri      |         1339 |   76 |
| .Hon      |         1246 |  101 |
| William   |         1215 |  126 |
| Harald    |         1153 |  311 |
| eric      |         1116 |   16 |
| Roanna    |         1039 |  104 |
| Mimi      |          968 |  497 |
| Christine |          930 |  173 |
+-----------+--------------+------+

**Now look at Top Fans compared to Reviews:**
**SQL Code:**

	SELECT name, review_count, fans
	FROM user
	ORDER BY fans DESC
	LIMIT 10;

+-----------+--------------+------+
| name      | review_count | fans |
+-----------+--------------+------+
| Amy       |          609 |  503 |
| Mimi      |          968 |  497 |
| Harald    |         1153 |  311 |
| Gerald    |         2000 |  253 |
| Christine |          930 |  173 |
| Lisa      |          813 |  159 |
| Cat       |          377 |  133 |
| William   |         1215 |  126 |
| Fran      |          862 |  124 |
| Lissa     |          834 |  120 |
+-----------+--------------+------+
**About half (5) of the people show up both in the Top Reviewer and Top Fan lists, so off-hand I suspect that there is some correlation between more reviews and more fans, but I would withhold a difinitive statement without some deeper statistical analysis outside of SQL.** 
	
9. Are there more reviews with the word "love" or with the word "hate" in them?

**Answer:**
+-----------+-----------+
| Text_Love | Text_Hate |
+-----------+-----------+
|      1780 |       232 |
+-----------+-----------+
	
	**SQL code used to arrive at answer:**
	SELECT(SELECT COUNT (text)
	  FROM review
	  WHERE text like "%love%") AS Text_Love,
	  
	  	(SELECT COUNT (text)
	    	FROM review
	    	WHERE text like "%hate%") AS Text_Hate;
		
	
10. Find the top 10 users with the most fans:

**SQL code used to arrive at answer:**

	SELECT name, fans
	FROM user
	ORDER BY fans DESC
	LIMIT 10;
	

**Copy and Paste the Result Below:**
+-----------+------+
| name      | fans |
+-----------+------+
| Amy       |  503 |
| Mimi      |  497 |
| Harald    |  311 |
| Gerald    |  253 |
| Christine |  173 |
| Lisa      |  159 |
| Cat       |  133 |
| William   |  126 |
| Fran      |  124 |
| Lissa     |  120 |
+-----------+------+
	
11. Is there a strong relationship (or correlation) between having a high number of fans and being listed as "useful" or "funny?" Out of the top 10 users with the highest number of fans, what percent are also listed as “useful” or “funny”?

Key:
0% - 25% - Low relationship
26% - 75% - Medium relationship
76% - 100% - Strong relationship
	
**SQL code used to arrive at answer:**
	
		SELECT name, 
	      fans, 
	      useful, 
	      funny
	FROM user
	ORDER BY fans DESC
	LIMIT 10;
	

**Copy and Paste the Result Below:**
	+-----------+------+--------+--------+
| name      | fans | useful |  funny |
+-----------+------+--------+--------+
| Amy       |  503 |   3226 |   2554 |
| Mimi      |  497 |    257 |    138 |
| Harald    |  311 | 122921 | 122419 |
| Gerald    |  253 |  17524 |   2324 |
| Christine |  173 |   4834 |   6646 |
| Lisa      |  159 |     48 |     13 |
| Cat       |  133 |   1062 |    672 |
| William   |  126 |   9363 |   9361 |
| Fran      |  124 |   9851 |   7606 |
| Lissa     |  120 |    455 |    150 |
+-----------+------+--------+--------+
		
**Please explain your findings and interpretation of the results:**
	There does not seem to be a high,direct correlation between the terms "useful" and "funny" as they relate to the number of  a user has fans. It is difficult, however, to make that statement with any degree of certainty without undtaking a more in-depth analysis of the data, one which is out side the scope of this assignment.
	

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. 

**COMMENT:  Let's examine Bars AND Resturants in Las Vegas**

			SELECT
			        b.name AS Name,
			        c.category,
			        b.stars AS Stars,
			        b.city
			FROM business b
			JOIN category c
			ON b.id = c.business_id
			WHERE  
			    city LIKE "%Las%" AND
			        (category LIKE "%Rest%" OR
			            category IS 'Bars')
			ORDER BY stars;
		             

	+--------------------------+-------------+-------+-----------+
	| Name                     | category    | Stars | city      |
	+--------------------------+-------------+-------+-----------+
	| Wingstop                 | Restaurants |   3.0 | Las Vegas |
	| Hi Scores - Blue Diamond | Bars        |   3.5 | Las Vegas |
	| Jacques Cafe             | Restaurants |   4.0 | Las Vegas |
	| Big Wong Restaurant      | Restaurants |   4.0 | Las Vegas |
	| Hibachi-San              | Restaurants |   4.5 | Las Vegas |
	+--------------------------+-------------+-------+-----------+

**All of the resturants and the bars are rated at 3-stars and above.  Lets divide the sample into two groups: those resturants and bars with star ratings <= 3.5, and those with star ratings  > 3.5**

i. Do the two groups you chose to analyze have a different distribution of hours?

**Look at selected resturants and bars and examine their hours.**

            SELECT
			        b.name AS Name,
			        b.stars AS Stars,
			        b.city,
			        h.hours  
			FROM business b
			JOIN category c   ON b.id = c.business_id
			JOIN hours h      ON b.id = h.business_id
			WHERE  
			    city LIKE "%Las%" AND
			        (category LIKE "%Rest%" OR
			            category IS 'Bars')
			ORDER BY stars DESC;
		             



	+--------------------------+-------+-----------+-----------------------+
	| Name                     | Stars | city      | hours                 |
	+--------------------------+-------+-----------+-----------------------+
	| Jacques Cafe             |   4.0 | Las Vegas | Monday|11:00-20:00    |
	| Jacques Cafe             |   4.0 | Las Vegas | Tuesday|11:00-20:00   |
	| Jacques Cafe             |   4.0 | Las Vegas | Friday|11:00-20:00    |
	| Jacques Cafe             |   4.0 | Las Vegas | Wednesday|11:00-20:00 |
	| Jacques Cafe             |   4.0 | Las Vegas | Thursday|11:00-20:00  |
	| Jacques Cafe             |   4.0 | Las Vegas | Sunday|8:00-14:00     |
	| Jacques Cafe             |   4.0 | Las Vegas | Saturday|11:00-20:00  |
	| Big Wong Restaurant      |   4.0 | Las Vegas | Monday|10:00-23:00    |
	| Big Wong Restaurant      |   4.0 | Las Vegas | Tuesday|10:00-23:00   |
	| Big Wong Restaurant      |   4.0 | Las Vegas | Friday|10:00-23:00    |
	| Big Wong Restaurant      |   4.0 | Las Vegas | Wednesday|10:00-23:00 |
	| Big Wong Restaurant      |   4.0 | Las Vegas | Thursday|10:00-23:00  |
	| Big Wong Restaurant      |   4.0 | Las Vegas | Sunday|10:00-23:00    |
	| Big Wong Restaurant      |   4.0 | Las Vegas | Saturday|10:00-23:00  |
	| Hi Scores - Blue Diamond |   3.5 | Las Vegas | Monday|0:00-0:00      |
	| Hi Scores - Blue Diamond |   3.5 | Las Vegas | Tuesday|0:00-0:00     |
	| Hi Scores - Blue Diamond |   3.5 | Las Vegas | Friday|0:00-0:00      |
	| Hi Scores - Blue Diamond |   3.5 | Las Vegas | Wednesday|0:00-0:00   |
	| Hi Scores - Blue Diamond |   3.5 | Las Vegas | Thursday|0:00-0:00    |
	| Hi Scores - Blue Diamond |   3.5 | Las Vegas | Sunday|0:00-0:00      |
	| Hi Scores - Blue Diamond |   3.5 | Las Vegas | Saturday|0:00-0:00    |
	| Wingstop                 |   3.0 | Las Vegas | Monday|11:00-0:00     |
	| Wingstop                 |   3.0 | Las Vegas | Tuesday|11:00-0:00    |
	| Wingstop                 |   3.0 | Las Vegas | Friday|11:00-0:00     |
	| Wingstop                 |   3.0 | Las Vegas | Wednesday|11:00-0:00  |
	+--------------------------+-------+-----------+-----------------------+
	(Output limit exceeded, 25 of 28 total rows shown)

**Noted that the 4.5 star resturant (Hibachi-San) fell off the list.  What happended to it?**

		SELECT  is_open
		FROM business b
		JOIN category c     ON b.id = c.business_id
		WHERE  
		    name = "Hibachi-San"

	+---------+
	| is_open |
	+---------+
	|       0 |
	|       0 |
	+---------+

**Hibachi-San is closed, so it is not returning a value when you join the Business table to the Hours table. I would normally do a FULL JOIN, but SQLite is not supporting that.**

**To answer the original question, is seems that the higher the star rating the more limited the hours are.  This makes intrinsic sense as higher rated resturants normally have set hour of service where bars and low quality resturants remain open in Las Vegas to capture as mush business as possible.**


ii. Do the two groups you chose to analyze have a different number of reviews?
         
	   +--------------------------+-------+-----------+--------------+
	| Name                     | Stars | city      | review_count |
	+--------------------------+-------+-----------+--------------+
	| Hibachi-San              |   4.5 | Las Vegas |            3 |
	| Jacques Cafe             |   4.0 | Las Vegas |          168 |
	| Big Wong Restaurant      |   4.0 | Las Vegas |          768 |
	| Hi Scores - Blue Diamond |   3.5 | Las Vegas |          105 |
	| Wingstop                 |   3.0 | Las Vegas |          123 |
	+--------------------------+-------+-----------+--------------+  

**The review count does not seem to have an effect on star-ratings.  Oddly the highest star-rating goes to the resturant with the smallest review count.  It appeared to have a small but dedicated fan base before it closed.** 

iii. Are you able to infer anything from the location data provided between these two groups? Explain.

SQL code used for analysis:

			SELECT
		  b.name AS Name,
			b.stars AS Stars,
			b.city,
			b.postal_code,
			b.neighborhood
		FROM business b
		JOIN category c   ON b.id = c.business_id
		WHERE  
			city LIKE "%Las%" AND
		  (category LIKE "%Rest%" OR
					 category IS 'Bars')
		ORDER BY stars DESC;	
	


	+--------------------------+-------+-----------+-------------+----------
| Name                     | Stars | city      | postal_code | neighborhood |
+--------------------------+-------+-----------+-------------+--------------+
| Hibachi-San              |   4.5 | Las Vegas | 89169       | Eastside     |
| Jacques Cafe             |   4.0 | Las Vegas | 89134       | Summerlin    |
| Big Wong Restaurant      |   4.0 | Las Vegas | 89146       | Chinatown    |
| Hi Scores - Blue Diamond |   3.5 | Las Vegas | 89139       | Southwest    |
| Wingstop                 |   3.0 | Las Vegas | 89103       |              |
+--------------------------+-------+-----------+-------------+--------------+

**Each of the resturannts have distinct postal codes and neighborhoods, so there is really no information to be gleened from location.**

2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1:
         
**We already went through this analysis above. The only resturant that is closed is Hibachi-San, and it only has three reviews albeit the highest of the sample.**


ii. Difference 2:
         
**Like the other resturants, Hibachi-San has a distinct location, but we do not have enough data to infer if that has an bearing on the estblishment being closed.**      
         
SQL code used for analysis:

**See above code**	
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:
         
**I'd like to look at Users, specifically the top reviewers and learn more about them.  For example, how long have they been reviewing, what is their average star-rating, etc.**

ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:

**The data need for this is simply the list of names for the top reviewers that can be found in the user table sorted by review_count.  Also other useful data is 'yelping_since', 'average_stars', also I'd like to look at the tables elite_years and friends to see if they add anything.**                          
                  
iii. Output of your finished dataset:
 +-----------+--------------+-----------+------+---------------+--------------------+
| name      | Review Count | Fan Count | Year | average_stars | compliment_profile |
+-----------+--------------+-----------+------+---------------+--------------------+
| Amy       |          609 |       503 | 2007 |          3.21 |                145 |
| Mimi      |          968 |       497 | 2011 |          4.05 |                 54 |
| Harald    |         1153 |       311 | 2012 |           4.4 |               2367 |
| Gerald    |         2000 |       253 | 2012 |           3.6 |                 19 |
| Christine |          930 |       173 | 2009 |          3.69 |                 39 |
| Lisa      |          813 |       159 | 2009 |          4.09 |                  6 |
| Cat       |          377 |       133 | 2009 |          3.99 |                 53 |
| William   |         1215 |       126 | 2015 |          4.41 |                 12 |
| Fran      |          862 |       124 | 2012 |           4.1 |                 94 |
| Lissa     |          834 |       120 | 2007 |          3.68 |                 57 |
| Mark      |          861 |       115 | 2009 |          3.36 |                  2 |
| Tiffany   |          408 |       111 | 2008 |          4.09 |                 17 |
| bernice   |          255 |       105 | 2007 |          3.95 |                 18 |
| Roanna    |         1039 |       104 | 2006 |          3.71 |                  7 |
| Angela    |          694 |       101 | 2010 |          3.89 |                  7 |
| .Hon      |         1246 |       101 | 2006 |          3.14 |                 20 |
| Ben       |          307 |        96 | 2007 |           3.7 |                 46 |
| Linda     |          584 |        89 | 2005 |          4.06 |                 34 |
| Christina |          842 |        85 | 2012 |           4.1 |                  2 |
| Jessica   |          220 |        84 | 2009 |           4.1 |                 36 |
| Greg      |          408 |        81 | 2008 |          3.67 |                 72 |
| Nieves    |          178 |        80 | 2013 |          3.64 |                  3 |
| Sui       |          754 |        78 | 2009 |          3.62 |                  5 |
| Yuri      |         1339 |        76 | 2008 |          4.11 |                  6 |
| Nicole    |          161 |        73 | 2009 |          3.87 |                  5 |
+-----------+--------------+-----------+------+---------------+--------------------+
(Output limit exceeded, 25 of 10000 total rows shown)     
    



iv. Provide the SQL code you used to create your final dataset:
	SELECT  name, 
	        review_count AS 'Review Count',
	        fans AS 'Fan Count',
	        strftime('%Y', yelping_since) AS Year,
	        average_stars,
	        compliment_profile
	FROM user u
	ORDER BY fans DESC
